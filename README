mkdir git
cd git
git init
git remote add repository-name https://github.com/jusss/python.git
git pull repository-name master
git push repository-name master


git config --global user.name "Your Name"
git config --global user.email "your@email.org"
git clone https://github.com/gittower/git-crash-course.git

git status
git add index.html new-page.html css/*
git commit -m "Implement the new login box"
git log

git diff file-name 查看文件更改内容 然后git add git commit再加入仓库
git log查看记录
git log --pretty=oneline那一长串的数字是commit id
git中用HEAD表示当前版本,上一个版本是HEAD^,上上个是HEAD^^,100个版本之前HEAD~100

回滚上一个版本 git reset --hard HEAD^ 或者用commit id替代,git log可查,commit id只需要
前几位与其它不重复的即可
git reflog记录每一次指令

git目录下创建个文件,文件在工作区,git add后文件进暂存区Stage/index, git commit进分支

git commit只负责把暂存区的修改提交,所以如果在工作区修改文件后,git add进暂存区,然后又修改
了文件,接着就git commit了,这时只会把第一次修改的进分支,所以每次修改后都需要git add加
暂存区然后git commit把暂存区的进分支

git reset HEAD file-name 把暂存区的修改撤销掉,重新回工作区

修改了工作区的文件,想丢弃修改,用git checkout -- file-name
修改暂存区的如果想放弃修改,git reset HEAD file先回工作区,然后git checkout -- file即可
如果提交进分支了,就git reset --hard commit-id版本回滚

在工作区rm删除文件后,git rm然后git commit从分支也就删除了
工作区rm删除文件后,git checkout -- file-name会把分支的拉回工作区

git clone and login with private key
创建分支
一个仓库下可以有多个分支,默认是master
创建分支并切换到dev分支 git checkout -b dev
git branch查看当前分支
HEAD指向当前分支,默认master,创建dev分支并切换后HEAD指向dev分支,然后对文件进行修改提交,
然后再返回master分支,会发现master分支下的文件都未改变

一个仓库有多个分支,每个分支就是一个时间线,可以有多个时间线,同一文件在不用时间线的内容不一样
git checkout branch-name 切换分支

git checkout -b bla2创建并切到bla2分支,然后对adult文件进行修改并git add/commit提交进bla2分支,然后git checkout master切到master分支,发现adult文件并没修改

创建分支,就是在当前这个时间点做个记号,然后从这个时间点之后的文件操作,
随便改,出毛病了,就不合并到上个时间点即刚才做了标记的时间点,没出问题就合并到上个时间点,然后接着创建分支, 一般都把master做时间点,然后不停的合并向前滚,master也不停的在时间上向前滚动

master分支上创建个bla2,然后修改,master上的文件不变,bla2上的文件变了,在bla2分支上
创建bla3分支,bla3的文件一开始没修改时和bla2分支的内容修改后一样,还可以贴标签
master贴v1.0 bla2贴v2.0 bla3贴v3.0, 在分支上用git tag v1.0即可给当前分支打上标签
git tag -d v0.1标签删除

git checkout bla2
git merge master
合并bla2分支到master
合并后删除分支用 git branch -d bla2
这样不停的创建 合并 删除分支

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

master是稳定的,平时不在master分支上操作,创建个分支bla2,然后每人从bla2再创建个分支,最后合并到bla2,然后bla2合并到master

但是在GitHub上，利用Git极其强大的克隆和分支功能，人们群众真正可以第一次自由参与各种开源项目了。

如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：

git clone git@github.com:michaelliao/bootstrap.git

一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。

如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。

如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。

    在GitHub上，可以任意Fork开源仓库；

    自己拥有Fork后的仓库的读写权限；

    可以推送pull request给官方仓库来贡献代码。
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

每个仓库的Git配置文件都放在.git/config文件中：
$ cat .git/config 
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
    precomposeunicode = true
[remote "origin"]
    url = git@github.com:michaelliao/learngit.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
    remote = origin
    merge = refs/heads/master
[alias]
    last = log -1

而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

$ cat .gitconfig
[alias]
    co = checkout
    ci = commit
    br = branch
    st = status
[user]
    name = Your Name
    email = your@email.com

http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000